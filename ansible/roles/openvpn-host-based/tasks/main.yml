---
- name: Ensure required packages are installed
  apt:
    name:
      - openvpn
      - wget
      - openssl
    state: present
    update_cache: yes

- name: Determine the permissionless group
  command: grep -qs "^nogroup:" /etc/group
  register: nogroup_check
  ignore_errors: yes

- name: Set permissionless group
  set_fact:
    NOGROUP: "{{ 'nogroup' if nogroup_check.rc == 0 else 'nobody' }}"

- name: Ensure EasyRSA directory exists
  file:
    path: /etc/openvpn/easy-rsa
    state: directory

- name: Download EasyRSA
  get_url:
    url: "https://github.com/OpenVPN/easy-rsa/releases/download/v3.1.2/EasyRSA-3.1.2.tgz"
    dest: /tmp/easy-rsa.tgz

- name: Extract EasyRSA
  unarchive:
    src: /tmp/easy-rsa.tgz
    dest: /etc/openvpn/easy-rsa
    remote_src: yes
    extra_opts: ["--strip-components=1", "--no-same-owner"]

- name: Remove EasyRSA tar file
  file:
    path: /tmp/easy-rsa.tgz
    state: absent

- name: Set EasyRSA vars for EC certificates
  copy:
    dest: /etc/openvpn/easy-rsa/vars
    content: |
      set_var EASYRSA_ALGO ec
      set_var EASYRSA_CURVE secp384r1
  when: cert_type == "1"

- name: Set EasyRSA vars for RSA certificates
  copy:
    dest: /etc/openvpn/easy-rsa/vars
    content: |
      set_var EASYRSA_KEY_SIZE 2048
  when: cert_type == "2"

- name: Generate random identifier for CN and server name
  set_fact:
    SERVER_CN: "cn_{{ lookup('password', '/dev/null', length=16, chars=ascii_letters + digits) }}"
    SERVER_NAME: "server_{{ lookup('password', '/dev/null', length=16, chars=ascii_letters + digits) }}"

- name: Save generated CN and server name
  copy:
    dest: /etc/openvpn/easy-rsa/SERVER_CN_GENERATED
    content: "{{ SERVER_CN }}"

- name: Save generated server name
  copy:
    dest: /etc/openvpn/easy-rsa/SERVER_NAME_GENERATED
    content: "{{ SERVER_NAME }}"

- name: Initialize the PKI directory
  command: ./easyrsa init-pki
  args:
    chdir: /etc/openvpn/easy-rsa

- name: Build CA using EasyRSA
  command: ./easyrsa --batch --req-cn="{{ SERVER_CN }}" build-ca nopass
  args:
    chdir: /etc/openvpn/easy-rsa

- name: Generate DH parameters
  command: openssl dhparam -out /etc/openvpn/easy-rsa/dh.pem 2048
  when: dh_type == "2"

- name: Build server certificate using EasyRSA
  command: ./easyrsa --batch build-server-full "{{ SERVER_NAME }}" nopass
  args:
    chdir: /etc/openvpn/easy-rsa

- name: Generate CRL
  command: EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
  args:
    chdir: /etc/openvpn/easy-rsa

- name: Generate tls-crypt key
  command: openvpn --genkey --secret /etc/openvpn/tls-crypt.key
  when: tls_sig == "1"

- name: Generate tls-auth key
  command: openvpn --genkey --secret /etc/openvpn/tls-auth.key
  when: tls_sig == "2"

- name: Move generated files
  copy:
    remote_src: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "/etc/openvpn/easy-rsa/pki/ca.crt", dest: "/etc/openvpn/ca.crt" }
    - { src: "/etc/openvpn/easy-rsa/pki/private/ca.key", dest: "/etc/openvpn/ca.key" }
    - { src: "/etc/openvpn/easy-rsa/pki/issued/{{ SERVER_NAME }}.crt", dest: "/etc/openvpn/server.crt" }
    - { src: "/etc/openvpn/easy-rsa/pki/private/{{ SERVER_NAME }}.key", dest: "/etc/openvpn/server.key" }
    - { src: "/etc/openvpn/easy-rsa/pki/crl.pem", dest: "/etc/openvpn/crl.pem" }
    - { src: "/etc/openvpn/easy-rsa/dh.pem", dest: "/etc/openvpn/dh.pem" }
  when: dh_type == "2"

- name: Make CRL readable by non-root users
  file:
    path: /etc/openvpn/crl.pem
    mode: '0644'

- name: Create OpenVPN server configuration
  template:
    src: server.conf.j2
    dest: /etc/openvpn/server.conf
    mode: '0644'

- name: Enable and start OpenVPN service
  systemd:
    name: openvpn@server
    state: started
    enabled: yes

- name: Restart OpenVPN service
  systemd:
    name: openvpn@server
    state: restarted
    when: restart_openvpn is defined and restart_openvpn
